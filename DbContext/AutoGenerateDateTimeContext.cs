public interface IAutoDateTimeFields
{
    DateTime LastModified { get; set; }
    DateTime CreatedOn { get; set; }
}
    
public class AutoGenerateDateTimeContext : DbContext
{
    public AutoGenerateDateTimeContext(DbContextOptions options) : base(options)
    {
    }

    protected void AutoGenerateDateTimeFields()
    {
        var objectStateEntries = ChangeTracker.Entries()
            .Where(e => e.Entity is IAutoDateTimeFields &&
                (e.State == EntityState.Modified || e.State == EntityState.Added))
            .ToList();

        var currentTime = DateTime.UtcNow;
        foreach (var entry in objectStateEntries)
        {
            var entityBase = entry.Entity as IAutoDateTimeFields;
            if (entityBase == null)
            {
                continue;
            }

            if (entry.State == EntityState.Added)
            {
                entityBase.CreatedOn = currentTime;
            }

            entityBase.LastModified = currentTime;
        }
    }

    public override int SaveChanges()
    {
        AutoGenerateDateTimeFields();
        return base.SaveChanges();
    }

    public override async Task<int> SaveChangesAsync(CancellationToken cancellationToken = default(CancellationToken))
    {
        AutoGenerateDateTimeFields();
        return await base.SaveChangesAsync(cancellationToken);
    }

    protected override void OnModelCreating(ModelBuilder builder)
    {
        base.OnModelCreating(builder);
    }
}
